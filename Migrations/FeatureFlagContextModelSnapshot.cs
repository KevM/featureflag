// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using featureflags;

namespace featureflags.Migrations
{
    [DbContext(typeof(FeatureFlagContext))]
    partial class FeatureFlagContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("featureflags.FeatureFlag", b =>
                {
                    b.Property<Guid>("FeatureFlagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ForceEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FeatureFlagId");

                    b.ToTable("FeatureFlags");
                });

            modelBuilder.Entity("featureflags.Rule", b =>
                {
                    b.Property<Guid>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Activated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Deactivated")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FeatureFlagId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchExpression")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operator")
                        .HasColumnType("TEXT");

                    b.HasKey("RuleId");

                    b.HasIndex("FeatureFlagId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("featureflags.RuleSchedule", b =>
                {
                    b.Property<Guid>("RuleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MatchCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MatchTrafficCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("RuleId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("RuleSchedules");
                });

            modelBuilder.Entity("featureflags.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Activated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Deactivated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("TrafficPercentage")
                        .HasColumnType("REAL");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("featureflags.Rule", b =>
                {
                    b.HasOne("featureflags.FeatureFlag", "FeatureFlag")
                        .WithMany()
                        .HasForeignKey("FeatureFlagId");
                });

            modelBuilder.Entity("featureflags.RuleSchedule", b =>
                {
                    b.HasOne("featureflags.Rule", null)
                        .WithMany("RuleSchedules")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("featureflags.Schedule", null)
                        .WithMany("RuleSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
